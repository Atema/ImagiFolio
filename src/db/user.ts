import { randomBytes, scrypt as scryptCb, timingSafeEqual } from "node:crypto";
import { promisify } from "node:util";
const scrypt = promisify(scryptCb);

/**
 * Hash a password for database storage using scrypt
 * @param password User-provided password
 * @param salt Optional salt from a stored hash
 * @returns Hash in binary format, containing 1-byte version number, salt and hash
 */
export async function hashPassword(password: string, salt?: Buffer) {
  if (!salt) salt = randomBytes(16);
  const hash = (await scrypt(password, salt, 64)) as Buffer;
  return Buffer.concat([Buffer.from([0]), salt, hash]);
}

/**
 * Check a given password against the database-stored password hash
 * @param password User-provided password
 * @param storedHash Stored hash (generated by {@link hashPassword})
 * @returns Whether the stored hash matches the password
 */
export async function checkPasswordHash(password: string, storedHash: Buffer) {
  const storedSalt = storedHash.subarray(1, 17);
  const calculatedHash = await hashPassword(password, storedSalt);
  return timingSafeEqual(storedHash, calculatedHash);
}
